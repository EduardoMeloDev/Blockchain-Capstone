// define a variable to import the <Verifier> or <renamedVerifier> solidity contract generated by Zokrates
var verifier = artifacts.require('verifier');
var json = require('./proof.json');

// - use the contents from proof.json generated from zokrates steps
contract('verifierTest', accounts => {

    const account_one = accounts[0];
    const account_two = accounts[1];

    // Test verification with correct proof
    describe('Test verification with correct proof', function () {
        beforeEach(async function () {
            this.contract = await verifier.new({from: account_one});
        })

        it('correct proof', async function () {
            let result = await this.contract.verifyTx.call(json.proof.a,json.proof.b,json.proof.c,json.inputs);
            assert.equal(result,true,"proof is invalid")
        })

    });

    // Test verification with incorrect proof
    describe('Test verification with incorrect proof', function () {
        beforeEach(async function () {
            this.contract = await verifier.new({from: account_one});
        })

        it('incorrect proof', async function () {

        var errorJson = {
            "inputs": ["0x0000000000000000000000000000000000000000000000000000000000000001", "0x0000000000000000000000000000000000000000000000000000000000000001"]
        }

          let result = await this.contract.verifyTx.call(json.proof.a, json.proof.b, json.proof.c, errorJson.inputs)
          assert.equal(result,false,"proof is invalied")

        });
    });

})